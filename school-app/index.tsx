import { GoogleGenAI, Type } from "@google/genai";
import React, { useState, useEffect, useMemo } from 'react';
import { createRoot } from 'react-dom/client';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
const SUBJECTS = ['Mathematics', 'Science', 'History', 'English', 'Art'];

// UTILITY FUNCTIONS
const getRouteFromHash = () => {
    const hash = window.location.hash.slice(2); // Remove #/
    if (!hash) return ['home'];
    return hash.split('/').map(decodeURIComponent);
};

const capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);

// COMPONENTS

/**
 * Side Navigation Component
 */
const Sidenav = ({ currentRoute }) => {
    const isSubjectActive = currentRoute[0] === 'subject';
    const activeSubject = isSubjectActive ? currentRoute[1] : null;

    return (
        <aside className="sidenav">
            <header className="sidenav-header">School App</header>
            <nav>
                <ul>
                    <li><a href="#/home" className={currentRoute[0] === 'home' ? 'active' : ''}>Home</a></li>
                    {SUBJECTS.map(subject => (
                        <li key={subject}>
                            <a href={`#/subject/${encodeURIComponent(subject)}`} className={activeSubject === subject ? 'active' : ''}>
                                {subject}
                            </a>
                        </li>
                    ))}
                </ul>
            </nav>
        </aside>
    );
};

/**
 * Breadcrumbs Component
 */
const Breadcrumbs = ({ route }) => {
    let pathItems = ['home'];
    if (route[0] === 'subject' && route[1]) {
        pathItems.push(route[1]);
    }

    return (
        <div className="breadcrumbs" aria-label="breadcrumb">
            <nav>
                <ol>
                    {pathItems.map((item, index) => {
                        const isLast = index === pathItems.length - 1;
                        const href = item === 'home' ? '#/home' : `#/subject/${encodeURIComponent(item)}`;
                        return (
                            <li key={item}>
                                {isLast ? (
                                    <span>{capitalize(item)}</span>
                                ) : (
                                    <a href={href}>{capitalize(item)}</a>
                                )}
                            </li>
                        );
                    })}
                </ol>
            </nav>
        </div>
    );
};


/**
 * Home Page Component
 */
const HomePage = () => (
    <>
        <h1 className="page-header">Welcome to the School App!</h1>
        <div className="content-body">
            <p>This is your central hub for school subjects.</p>
            <p>Use the navigation to explore different subjects. Each page contains a quick, interesting summary generated by the Gemini API to give you a glimpse into the topic.</p>
            <p>Here are the subjects available:</p>
            <ul>
                {SUBJECTS.map(subject => <li key={subject}>{subject}</li>)}
            </ul>
        </div>
    </>
);

/**
 * Subject Page Component
 */
const SubjectPage = ({ subject }) => {
    const [subjectData, setSubjectData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchSubjectInfo = async () => {
            setLoading(true);
            setError('');
            setSubjectData(null);

            const schema = {
                type: Type.OBJECT,
                properties: {
                    summary: { type: Type.STRING, description: "A one-paragraph overview of the subject." },
                    key_topics: {
                        type: Type.ARRAY,
                        items: { type: Type.STRING },
                        description: "A list of 3-5 key topics in this subject."
                    },
                    fun_fact: { type: Type.STRING, description: "A surprising or interesting fun fact related to the subject." }
                },
                required: ["summary", "key_topics", "fun_fact"]
            };

            try {
                const prompt = `Generate a summary, key topics, and a fun fact for the school subject: ${subject}.`;
                const response = await ai.models.generateContent({
                    model: 'gemini-2.5-flash',
                    contents: prompt,
                    config: {
                        responseMimeType: "application/json",
                        responseSchema: schema,
                    }
                });
                
                const data = JSON.parse(response.text);
                setSubjectData(data);

            } catch (err) {
                console.error("API or Parsing Error:", err);
                setError('Failed to load subject information. Please try again later.');
            } finally {
                setLoading(false);
            }
        };

        if (subject) {
            fetchSubjectInfo();
        }
    }, [subject]);

    return (
        <>
            <h1 className="page-header">{subject}</h1>
            <div className="content-body">
                {loading && <div className="loader" aria-label="Loading content..."></div>}
                {error && <div className="error-message" role="alert">{error}</div>}
                {subjectData && (
                    <>
                        <p>{subjectData.summary}</p>

                        <h2 className="sub-header">Key Topics</h2>
                        <ul className="key-topics-list">
                            {subjectData.key_topics.map((topic, index) => <li key={index}>{topic}</li>)}
                        </ul>

                        <h2 className="sub-header">Fun Fact</h2>
                        <div className="fun-fact-box">
                           <p>{subjectData.fun_fact}</p>
                        </div>
                    </>
                )}
            </div>
        </>
    );
};


/**
 * Main App Component
 */
const App = () => {
    const [route, setRoute] = useState(getRouteFromHash());

    useEffect(() => {
        const handleHashChange = () => {
            setRoute(getRouteFromHash());
        };

        window.addEventListener('hashchange', handleHashChange);
        
        // Set initial route if hash is empty
        if (!window.location.hash || window.location.hash === '#/') {
            window.location.hash = '#/home';
        } else {
            handleHashChange(); // Sync state if hash already exists on load
        }

        return () => window.removeEventListener('hashchange', handleHashChange);
    }, []);
    
    const PageComponent = useMemo(() => {
        const [page, param] = route;
        if (page === 'subject' && SUBJECTS.includes(param)) {
            return <SubjectPage subject={param} />;
        }
        return <HomePage />;
    }, [route]);

    return (
        <div className="app-container">
            <Sidenav currentRoute={route} />
            <main className="main-content">
                <Breadcrumbs route={route} />
                {PageComponent}
            </main>
        </div>
    );
};

const container = document.getElementById('root');
const root = createRoot(container);
root.render(<App />);